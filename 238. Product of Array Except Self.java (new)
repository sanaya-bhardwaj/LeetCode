//Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
//The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
//You must write an algorithm that runs in O(n) time and without using the division operation.

//Approach
//Maintain two arrays. One to store all left products and one to store all right products i.e. right to i th element. Then multiply these values using a for loop.

//Complexity
//Time complexity:O(n)
//Space Complexity:O(n)

//Code

class Solution {
    public int[] productExceptSelf(int[] nums) {
        // Array to store left multiplication
        int[] left = new int[nums.length];
        // Array to store right multiplication
        int[] right = new int[nums.length];
        
        left[0] = 1;
        for(int i = 1; i< nums.length ; i++){
            left [i] = left[i-1] * nums[i-1];
        }
        right[nums.length -1 ] = 1; 
        for(int i =nums.length -2 ; i> -1 ; i--){
            right[i] = right[ i + 1] * nums[ i+1];
        }

        int[] ans = new int[nums.length];
        for(int i = 0 ; i<nums.length ; i++){
            ans[i] = left[i] * right[i];
        }
        return ans;
    }
}
